@{
    ViewData["Title"] = "History";
    Layout = "~/Views/Shared/Main_Layout.cshtml";
}

<style>
    .history-container {
        background-color: #f8f9fa;
        min-height: 100%;
        display: flex;
        flex-direction: column;
    }

    .filter-button-container {
        margin-bottom: 20px;
        background-color: #fff;
        padding: 12px;
    }

    .filter-button {
        background: none;
        border: none;
        color: #4267B2;
        font-size: 12px;
        cursor: pointer;
        padding: 0;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .filter-button:hover {
        color: #3498db;
    }

    .filter-icon {
        font-size: 12px;
    }

    .history-table-container {
        background-color: #fff;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 20px;
        flex: 1;
    }

    .history-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 12px;
    }

    .history-table th,
    .history-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e9ecef;
    }

    .history-table th {
        background-color: #fff;
        color: #696969;
        font-weight: 700;
        font-size: 14px;
    }

    .history-table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .history-table tbody tr:last-child td {
        border-bottom: none;
    }

    .history-table .status-approved {
        color: #27ae60;
        font-weight: 600;
    }

    .history-table .action-link {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
    }

    .history-table .action-link:hover {
        color: #2980b9;
        text-decoration: underline;
    }

    .pagination-container {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 15px;
        padding: 15px;
        background-color: #fff;
        border-radius: 10px;
        margin-top: auto;
    }

    .pagination-label {
        font-size: 12px;
        color: #696969;
    }

    .items-per-page-select {
        padding: 8px 12px;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        font-size: 12px;
        color: #696969;
        background-color: #fff;
    }

    .pagination-info {
        font-size: 12px;
        color: #696969;
    }

    .pagination-controls button {
        background: #fff;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 8px 12px;
        cursor: pointer;
        font-size: 12px;
        color: #696969;
        transition: all 0.3s ease;
    }

    .pagination-controls button:hover:not(:disabled) {
        background-color: #3498db;
        color: #fff;
        border-color: #3498db;
    }

    .pagination-controls button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .pagination-controls span {
        margin: 0 5px;
        font-size: 14px;
        color: #2C3E50;
    }

    /* Status colors */
    .status-completed {
        color: #27ae60;
        font-weight: 600;
    }

    .status-pending {
        color: #f39c12;
        font-weight: 600;
    }

    .status-cancelled {
        color: #e74c3c;
        font-weight: 600;
    }
</style>

<div class="history-container">
    <div class="filter-button-container">
        <button class="filter-button">
            <span class="filter-icon">+</span> Thêm bộ lọc
        </button>
    </div>

    <div class="history-table-container">
        <!-- Components table  -->
           @await Component.InvokeAsync("Table", new { 
            columnNames = new List<string> { "STT", "Mã đơn", "Bàn số",
                "Giờ đặt", "Tổng tiền", "Phương thức thanh toán", "Trạng thái",
                "Ghi chú", "Duyệt đơn", "Chi tiết đơn" 
                }, 
            tableBodyId = "orderHistoryBody" 
        })
    </div>

    <div class="pagination-container">
        <p id="restaurantIdDisplay">restaurant_id: </p>
        <span class="pagination-label">Số hàng trên mỗi trang:</span>
        <select class="items-per-page-select" id="itemsPerPage">
            <option value="15">15</option>
            <option value="30">30</option>
            <option value="50">50</option>
        </select>
        <span class="pagination-info" id="paginationInfo">1 - 15/0</span>
        <div class="pagination-controls">
            <button id="firstPage">&lt;&lt;</button>
            <button id="prevPage">&lt;</button>
            <button id="nextPage">&gt;</button>
            <button id="lastPage">&gt;&gt;</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Lấy thông tin user từ localStorage
            const userStr = localStorage.getItem('user');
            if (userStr) {
                try {
                    const user = JSON.parse(userStr);
                    if (user.restaurant_id) {
                        // Hiển thị restaurant_id lên giao diện
                        document.getElementById('restaurantIdDisplay').textContent = 'restaurant_id: ' + user.restaurant_id;
                        loadOrderHistory(user.restaurant_id);
                    } else {
                        document.getElementById('restaurantIdDisplay').textContent = 'restaurant_id: (không tìm thấy)';
                        console.error('Không tìm thấy restaurant_id trong thông tin user');
                    }
                } catch (error) {
                    document.getElementById('restaurantIdDisplay').textContent = 'restaurant_id: (lỗi dữ liệu)';
                    console.error('Lỗi khi parse user data:', error);
                }
            } else {
                document.getElementById('restaurantIdDisplay').textContent = 'restaurant_id: (chưa đăng nhập)';
                console.error('Chưa đăng nhập');
            }
        });

        async function loadOrderHistory(restaurantId) {
            try {
                const data = await window.restaurantService.getOrderHistory(restaurantId);
                displayOrderHistory(data);
            } catch (error) {
                console.error('Error loading order history:', error);
            }
        }

        function displayOrderHistory(data) {
            const tbody = document.getElementById('orderHistoryBody');
            tbody.innerHTML = '';

            let index = 1;
            for (const [key, order] of Object.entries(data)) {
                const row = document.createElement('tr');
                
                // Format date
                const orderDate = new Date(order.date_create);
                const formattedTime = orderDate.toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit'
                });

                // Format price
                const formattedPrice = new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND'
                }).format(order.total_price);

                row.innerHTML = `
                    <td>${String(index).padStart(2, '0')}</td>
                    <td>${order.id_order}</td>
                    <td>Bàn ${order.id_table}</td>
                    <td>${formattedTime}</td>
                    <td>${formattedPrice}</td>
                    <td>${order.payment}</td>
                    <td>${order.status_order}</td>
                    <td>0 ghi chú</td>
                    <td><a href="#" class="action-link">${order.status_order}</a></td>
                    <td><a href="#" class="action-link">[Xem đơn]</a></td>
                `;
                
                tbody.appendChild(row);
                index++;
            }

            // Update pagination info
            const totalOrders = Object.keys(data).length;
            document.getElementById('paginationInfo').textContent = `1 - ${totalOrders}/${totalOrders}`;
        }
    </script>
}
